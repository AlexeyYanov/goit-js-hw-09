{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAYC,SAASC,cAAc,SAkCzC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAIpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA5CPL,EAAUa,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAGC,iBACH,IAEoBC,EAAhBF,EAAGG,cADLC,SAAYC,EAAKH,EAALX,MAAOe,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAEvBC,EAAUC,OAAOJ,EAAMK,OACvBC,EAASF,OAAOH,EAAKI,OACrBE,EAAWH,OAAOF,EAAOG,OAC7B,GAAIF,EAAU,GAAKG,EAAS,GAAKC,GAAY,EAG3C,OAFAC,EAAA7B,GAAS8B,OAAOC,QAAS,kCACzB7B,EAAU8B,QAGZ,IAAK,IAAIC,EAAW,EAAGA,GAAYL,EAAUK,GAAY,EAGvD5B,EAAc4B,EAAUT,GACrBU,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBsB,EAAA7B,GAAS8B,OAAOM,QACd,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAGjD+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBsB,EAAA7B,GAAS8B,OAAOS,QACd,sBAAqCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAGjDiB,GAAWG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst formDelay = document.querySelector('.form');\nformDelay.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(ev) {\n  ev.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = ev.currentTarget;\n  let delayEl = Number(delay.value);\n  let stepEl = Number(step.value);\n  let amountEl = Number(amount.value);\n  if (delayEl < 0 || stepEl < 0 || amountEl <= 0) {\n    Notiflix.Notify.warning(`All data must be positive`);\n    formDelay.reset();\n    return;\n  }\n  for (let position = 1; position <= amountEl; position += 1) {\n    // delayEl = delayEl + stepEl * (position - 1);\n\n    createPromise(position, delayEl)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayEl += stepEl;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n// final//\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formDelay","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","ev","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayEl","Number","value","stepEl","amountEl","$parcel$interopDefault","Notify","warning","reset","position1","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.01b7736a.js.map"}