{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAYC,SAASC,cAAc,SAkCzC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAIpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5CbL,EAAUa,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAGC,iBACH,MACEC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAGM,cACP,IAAIC,EAAUC,OAAOL,EAAMM,OACvBC,EAASF,OAAOJ,EAAKK,OACrBE,EAAWH,OAAOH,EAAOI,OAC7B,GAAIF,EAAU,GAAKG,EAAS,GAAKC,GAAY,EAG3C,OAFAC,EAAA5B,GAAS6B,OAAOC,QAAQ,kCACxB5B,EAAU6B,QAGZ,IAAK,IAAIC,EAAW,EAAGA,GAAYL,EAAUK,GAAY,EAGvD3B,EAAc2B,EAAUT,GACrBU,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBqB,EAAA5B,GAAS6B,OAAOK,QACd,uBAAqB5B,QAAiBC,MAAU,IAGnD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBqB,EAAA5B,GAAS6B,OAAOO,QACd,sBAAoB9B,QAAeC,MAAU,IAGnDgB,GAAWG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst formDelay = document.querySelector('.form');\nformDelay.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(ev) {\n  ev.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = ev.currentTarget;\n  let delayEl = Number(delay.value);\n  let stepEl = Number(step.value);\n  let amountEl = Number(amount.value);\n  if (delayEl < 0 || stepEl < 0 || amountEl <= 0) {\n    Notiflix.Notify.warning(`All data must be positive`);\n    formDelay.reset();\n    return;\n  }\n  for (let position = 1; position <= amountEl; position += 1) {\n    // delayEl = delayEl + stepEl * (position - 1);\n\n    createPromise(position, delayEl)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayEl += stepEl;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n// final//\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formDelay","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","ev","preventDefault","elements","delay1","step","amount","currentTarget","delayEl","Number","value","stepEl","amountEl","$parcel$interopDefault","Notify","warning","reset","position1","then","success","catch","failure"],"version":3,"file":"03-promises.82605e7b.js.map"}